/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1 "github.com/opendatahub-io/opendatahub-operator/v2/apis/features/v1"
	featuresv1 "github.com/opendatahub-io/opendatahub-operator/v2/pkg/client/applyconfiguration/features/v1"
	scheme "github.com/opendatahub-io/opendatahub-operator/v2/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// FeatureTrackersGetter has a method to return a FeatureTrackerInterface.
// A group's client should implement this interface.
type FeatureTrackersGetter interface {
	FeatureTrackers() FeatureTrackerInterface
}

// FeatureTrackerInterface has methods to work with FeatureTracker resources.
type FeatureTrackerInterface interface {
	Create(ctx context.Context, featureTracker *v1.FeatureTracker, opts metav1.CreateOptions) (*v1.FeatureTracker, error)
	Update(ctx context.Context, featureTracker *v1.FeatureTracker, opts metav1.UpdateOptions) (*v1.FeatureTracker, error)
	UpdateStatus(ctx context.Context, featureTracker *v1.FeatureTracker, opts metav1.UpdateOptions) (*v1.FeatureTracker, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.FeatureTracker, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.FeatureTrackerList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.FeatureTracker, err error)
	Apply(ctx context.Context, featureTracker *featuresv1.FeatureTrackerApplyConfiguration, opts metav1.ApplyOptions) (result *v1.FeatureTracker, err error)
	ApplyStatus(ctx context.Context, featureTracker *featuresv1.FeatureTrackerApplyConfiguration, opts metav1.ApplyOptions) (result *v1.FeatureTracker, err error)
	FeatureTrackerExpansion
}

// featureTrackers implements FeatureTrackerInterface
type featureTrackers struct {
	client rest.Interface
}

// newFeatureTrackers returns a FeatureTrackers
func newFeatureTrackers(c *FeaturesV1Client) *featureTrackers {
	return &featureTrackers{
		client: c.RESTClient(),
	}
}

// Get takes name of the featureTracker, and returns the corresponding featureTracker object, and an error if there is any.
func (c *featureTrackers) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.FeatureTracker, err error) {
	result = &v1.FeatureTracker{}
	err = c.client.Get().
		Resource("featuretrackers").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of FeatureTrackers that match those selectors.
func (c *featureTrackers) List(ctx context.Context, opts metav1.ListOptions) (result *v1.FeatureTrackerList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.FeatureTrackerList{}
	err = c.client.Get().
		Resource("featuretrackers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested featureTrackers.
func (c *featureTrackers) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("featuretrackers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a featureTracker and creates it.  Returns the server's representation of the featureTracker, and an error, if there is any.
func (c *featureTrackers) Create(ctx context.Context, featureTracker *v1.FeatureTracker, opts metav1.CreateOptions) (result *v1.FeatureTracker, err error) {
	result = &v1.FeatureTracker{}
	err = c.client.Post().
		Resource("featuretrackers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(featureTracker).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a featureTracker and updates it. Returns the server's representation of the featureTracker, and an error, if there is any.
func (c *featureTrackers) Update(ctx context.Context, featureTracker *v1.FeatureTracker, opts metav1.UpdateOptions) (result *v1.FeatureTracker, err error) {
	result = &v1.FeatureTracker{}
	err = c.client.Put().
		Resource("featuretrackers").
		Name(featureTracker.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(featureTracker).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *featureTrackers) UpdateStatus(ctx context.Context, featureTracker *v1.FeatureTracker, opts metav1.UpdateOptions) (result *v1.FeatureTracker, err error) {
	result = &v1.FeatureTracker{}
	err = c.client.Put().
		Resource("featuretrackers").
		Name(featureTracker.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(featureTracker).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the featureTracker and deletes it. Returns an error if one occurs.
func (c *featureTrackers) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("featuretrackers").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *featureTrackers) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("featuretrackers").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched featureTracker.
func (c *featureTrackers) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.FeatureTracker, err error) {
	result = &v1.FeatureTracker{}
	err = c.client.Patch(pt).
		Resource("featuretrackers").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied featureTracker.
func (c *featureTrackers) Apply(ctx context.Context, featureTracker *featuresv1.FeatureTrackerApplyConfiguration, opts metav1.ApplyOptions) (result *v1.FeatureTracker, err error) {
	if featureTracker == nil {
		return nil, fmt.Errorf("featureTracker provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(featureTracker)
	if err != nil {
		return nil, err
	}
	name := featureTracker.Name
	if name == nil {
		return nil, fmt.Errorf("featureTracker.Name must be provided to Apply")
	}
	result = &v1.FeatureTracker{}
	err = c.client.Patch(types.ApplyPatchType).
		Resource("featuretrackers").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *featureTrackers) ApplyStatus(ctx context.Context, featureTracker *featuresv1.FeatureTrackerApplyConfiguration, opts metav1.ApplyOptions) (result *v1.FeatureTracker, err error) {
	if featureTracker == nil {
		return nil, fmt.Errorf("featureTracker provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(featureTracker)
	if err != nil {
		return nil, err
	}

	name := featureTracker.Name
	if name == nil {
		return nil, fmt.Errorf("featureTracker.Name must be provided to Apply")
	}

	result = &v1.FeatureTracker{}
	err = c.client.Patch(types.ApplyPatchType).
		Resource("featuretrackers").
		Name(*name).
		SubResource("status").
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
