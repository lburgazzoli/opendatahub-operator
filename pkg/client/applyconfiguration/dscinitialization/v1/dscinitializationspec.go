/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	infrastructurev1 "github.com/opendatahub-io/opendatahub-operator/v2/apis/infrastructure/v1"
)

// DSCInitializationSpecApplyConfiguration represents an declarative configuration of the DSCInitializationSpec type for use
// with apply.
type DSCInitializationSpecApplyConfiguration struct {
	ApplicationsNamespace *string                                `json:"applicationsNamespace,omitempty"`
	Monitoring            *MonitoringApplyConfiguration          `json:"monitoring,omitempty"`
	ServiceMesh           *infrastructurev1.ServiceMeshSpec      `json:"serviceMesh,omitempty"`
	TrustedCABundle       *TrustedCABundleSpecApplyConfiguration `json:"trustedCABundle,omitempty"`
	DevFlags              *DevFlagsApplyConfiguration            `json:"devFlags,omitempty"`
}

// DSCInitializationSpecApplyConfiguration constructs an declarative configuration of the DSCInitializationSpec type for use with
// apply.
func DSCInitializationSpec() *DSCInitializationSpecApplyConfiguration {
	return &DSCInitializationSpecApplyConfiguration{}
}

// WithApplicationsNamespace sets the ApplicationsNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ApplicationsNamespace field is set to the value of the last call.
func (b *DSCInitializationSpecApplyConfiguration) WithApplicationsNamespace(value string) *DSCInitializationSpecApplyConfiguration {
	b.ApplicationsNamespace = &value
	return b
}

// WithMonitoring sets the Monitoring field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Monitoring field is set to the value of the last call.
func (b *DSCInitializationSpecApplyConfiguration) WithMonitoring(value *MonitoringApplyConfiguration) *DSCInitializationSpecApplyConfiguration {
	b.Monitoring = value
	return b
}

// WithServiceMesh sets the ServiceMesh field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceMesh field is set to the value of the last call.
func (b *DSCInitializationSpecApplyConfiguration) WithServiceMesh(value infrastructurev1.ServiceMeshSpec) *DSCInitializationSpecApplyConfiguration {
	b.ServiceMesh = &value
	return b
}

// WithTrustedCABundle sets the TrustedCABundle field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TrustedCABundle field is set to the value of the last call.
func (b *DSCInitializationSpecApplyConfiguration) WithTrustedCABundle(value *TrustedCABundleSpecApplyConfiguration) *DSCInitializationSpecApplyConfiguration {
	b.TrustedCABundle = value
	return b
}

// WithDevFlags sets the DevFlags field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DevFlags field is set to the value of the last call.
func (b *DSCInitializationSpecApplyConfiguration) WithDevFlags(value *DevFlagsApplyConfiguration) *DSCInitializationSpecApplyConfiguration {
	b.DevFlags = value
	return b
}
