/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	codeflare "github.com/opendatahub-io/opendatahub-operator/v2/components/codeflare"
	dashboard "github.com/opendatahub-io/opendatahub-operator/v2/components/dashboard"
	datasciencepipelines "github.com/opendatahub-io/opendatahub-operator/v2/components/datasciencepipelines"
	kserve "github.com/opendatahub-io/opendatahub-operator/v2/components/kserve"
	kueue "github.com/opendatahub-io/opendatahub-operator/v2/components/kueue"
	modelmeshserving "github.com/opendatahub-io/opendatahub-operator/v2/components/modelmeshserving"
	modelregistry "github.com/opendatahub-io/opendatahub-operator/v2/components/modelregistry"
	ray "github.com/opendatahub-io/opendatahub-operator/v2/components/ray"
	trainingoperator "github.com/opendatahub-io/opendatahub-operator/v2/components/trainingoperator"
	trustyai "github.com/opendatahub-io/opendatahub-operator/v2/components/trustyai"
	workbenches "github.com/opendatahub-io/opendatahub-operator/v2/components/workbenches"
)

// ComponentsApplyConfiguration represents an declarative configuration of the Components type for use
// with apply.
type ComponentsApplyConfiguration struct {
	Dashboard            *dashboard.Dashboard                       `json:"dashboard,omitempty"`
	Workbenches          *workbenches.Workbenches                   `json:"workbenches,omitempty"`
	ModelMeshServing     *modelmeshserving.ModelMeshServing         `json:"modelmeshserving,omitempty"`
	DataSciencePipelines *datasciencepipelines.DataSciencePipelines `json:"datasciencepipelines,omitempty"`
	Kserve               *kserve.Kserve                             `json:"kserve,omitempty"`
	Kueue                *kueue.Kueue                               `json:"kueue,omitempty"`
	CodeFlare            *codeflare.CodeFlare                       `json:"codeflare,omitempty"`
	Ray                  *ray.Ray                                   `json:"ray,omitempty"`
	TrustyAI             *trustyai.TrustyAI                         `json:"trustyai,omitempty"`
	ModelRegistry        *modelregistry.ModelRegistry               `json:"modelregistry,omitempty"`
	TrainingOperator     *trainingoperator.TrainingOperator         `json:"trainingoperator,omitempty"`
}

// ComponentsApplyConfiguration constructs an declarative configuration of the Components type for use with
// apply.
func Components() *ComponentsApplyConfiguration {
	return &ComponentsApplyConfiguration{}
}

// WithDashboard sets the Dashboard field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Dashboard field is set to the value of the last call.
func (b *ComponentsApplyConfiguration) WithDashboard(value dashboard.Dashboard) *ComponentsApplyConfiguration {
	b.Dashboard = &value
	return b
}

// WithWorkbenches sets the Workbenches field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Workbenches field is set to the value of the last call.
func (b *ComponentsApplyConfiguration) WithWorkbenches(value workbenches.Workbenches) *ComponentsApplyConfiguration {
	b.Workbenches = &value
	return b
}

// WithModelMeshServing sets the ModelMeshServing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ModelMeshServing field is set to the value of the last call.
func (b *ComponentsApplyConfiguration) WithModelMeshServing(value modelmeshserving.ModelMeshServing) *ComponentsApplyConfiguration {
	b.ModelMeshServing = &value
	return b
}

// WithDataSciencePipelines sets the DataSciencePipelines field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DataSciencePipelines field is set to the value of the last call.
func (b *ComponentsApplyConfiguration) WithDataSciencePipelines(value datasciencepipelines.DataSciencePipelines) *ComponentsApplyConfiguration {
	b.DataSciencePipelines = &value
	return b
}

// WithKserve sets the Kserve field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kserve field is set to the value of the last call.
func (b *ComponentsApplyConfiguration) WithKserve(value kserve.Kserve) *ComponentsApplyConfiguration {
	b.Kserve = &value
	return b
}

// WithKueue sets the Kueue field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kueue field is set to the value of the last call.
func (b *ComponentsApplyConfiguration) WithKueue(value kueue.Kueue) *ComponentsApplyConfiguration {
	b.Kueue = &value
	return b
}

// WithCodeFlare sets the CodeFlare field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CodeFlare field is set to the value of the last call.
func (b *ComponentsApplyConfiguration) WithCodeFlare(value codeflare.CodeFlare) *ComponentsApplyConfiguration {
	b.CodeFlare = &value
	return b
}

// WithRay sets the Ray field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ray field is set to the value of the last call.
func (b *ComponentsApplyConfiguration) WithRay(value ray.Ray) *ComponentsApplyConfiguration {
	b.Ray = &value
	return b
}

// WithTrustyAI sets the TrustyAI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TrustyAI field is set to the value of the last call.
func (b *ComponentsApplyConfiguration) WithTrustyAI(value trustyai.TrustyAI) *ComponentsApplyConfiguration {
	b.TrustyAI = &value
	return b
}

// WithModelRegistry sets the ModelRegistry field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ModelRegistry field is set to the value of the last call.
func (b *ComponentsApplyConfiguration) WithModelRegistry(value modelregistry.ModelRegistry) *ComponentsApplyConfiguration {
	b.ModelRegistry = &value
	return b
}

// WithTrainingOperator sets the TrainingOperator field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TrainingOperator field is set to the value of the last call.
func (b *ComponentsApplyConfiguration) WithTrainingOperator(value trainingoperator.TrainingOperator) *ComponentsApplyConfiguration {
	b.TrainingOperator = &value
	return b
}
