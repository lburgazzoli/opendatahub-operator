/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	cluster "github.com/opendatahub-io/opendatahub-operator/v2/pkg/cluster"
	v1 "github.com/openshift/custom-resource-status/conditions/v1"
	corev1 "k8s.io/api/core/v1"
)

// DataScienceClusterStatusApplyConfiguration represents an declarative configuration of the DataScienceClusterStatus type for use
// with apply.
type DataScienceClusterStatusApplyConfiguration struct {
	Phase               *string                             `json:"phase,omitempty"`
	Conditions          []v1.Condition                      `json:"conditions,omitempty"`
	RelatedObjects      []corev1.ObjectReference            `json:"relatedObjects,omitempty"`
	ErrorMessage        *string                             `json:"errorMessage,omitempty"`
	InstalledComponents map[string]bool                     `json:"installedComponents,omitempty"`
	Components          *ComponentsStatusApplyConfiguration `json:"components,omitempty"`
	Release             *cluster.Release                    `json:"release,omitempty"`
}

// DataScienceClusterStatusApplyConfiguration constructs an declarative configuration of the DataScienceClusterStatus type for use with
// apply.
func DataScienceClusterStatus() *DataScienceClusterStatusApplyConfiguration {
	return &DataScienceClusterStatusApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *DataScienceClusterStatusApplyConfiguration) WithPhase(value string) *DataScienceClusterStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *DataScienceClusterStatusApplyConfiguration) WithConditions(values ...v1.Condition) *DataScienceClusterStatusApplyConfiguration {
	for i := range values {
		b.Conditions = append(b.Conditions, values[i])
	}
	return b
}

// WithRelatedObjects adds the given value to the RelatedObjects field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RelatedObjects field.
func (b *DataScienceClusterStatusApplyConfiguration) WithRelatedObjects(values ...corev1.ObjectReference) *DataScienceClusterStatusApplyConfiguration {
	for i := range values {
		b.RelatedObjects = append(b.RelatedObjects, values[i])
	}
	return b
}

// WithErrorMessage sets the ErrorMessage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ErrorMessage field is set to the value of the last call.
func (b *DataScienceClusterStatusApplyConfiguration) WithErrorMessage(value string) *DataScienceClusterStatusApplyConfiguration {
	b.ErrorMessage = &value
	return b
}

// WithInstalledComponents puts the entries into the InstalledComponents field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the InstalledComponents field,
// overwriting an existing map entries in InstalledComponents field with the same key.
func (b *DataScienceClusterStatusApplyConfiguration) WithInstalledComponents(entries map[string]bool) *DataScienceClusterStatusApplyConfiguration {
	if b.InstalledComponents == nil && len(entries) > 0 {
		b.InstalledComponents = make(map[string]bool, len(entries))
	}
	for k, v := range entries {
		b.InstalledComponents[k] = v
	}
	return b
}

// WithComponents sets the Components field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Components field is set to the value of the last call.
func (b *DataScienceClusterStatusApplyConfiguration) WithComponents(value *ComponentsStatusApplyConfiguration) *DataScienceClusterStatusApplyConfiguration {
	b.Components = value
	return b
}

// WithRelease sets the Release field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Release field is set to the value of the last call.
func (b *DataScienceClusterStatusApplyConfiguration) WithRelease(value cluster.Release) *DataScienceClusterStatusApplyConfiguration {
	b.Release = &value
	return b
}
